/**
 * Container type to store all information about a single test-case
 */
@groovy.transform.TupleConstructor
class TestCase {
    String name
    long timeInSeconds
    Boolean skipped
    // "An errored test is one that had an unanticipated problem."
    String error
    // "A failure is a test which the code has explicitly failed by using the mechanisms for that purpose."
    String failure
    // The file containing the contents of the standard output stream
    String stdoutFile
    // The file containing the contents of the standard error stream
    String stderrFile
}

/**
 * Creates a TestCase for a test which was aborted due to timeout
 *
 * Required parameters:
 * - name - test case name, must be unique within the test suite
 * - timeInSeconds - test case duration (timeout) in seconds
 *
 * Optional parameters:
 * - stdoutFile - the file containing the output of the test process written to standard output
 * - stderrFile - the file containing the output of the test process written to standard error
 *
 * Returns the newly created TestCase object
 */
def createTimeout(args) {
    return new TestCase(args.name, args.timeInSeconds, false, 'Test aborted due to timeout', '', args['stdoutFile'] ?: '', args['stderrFile'] ?: '')
}

/**
 * Creates a TestCase for a test which passed
 *
 * Required parameters:
 * - name - test case name, must be unique within the test suite
 * - timeInSeconds - test case duration (timeout) in seconds
 *
 * Optional parameters:
 * - stdoutFile - the file containing the output of the test process written to standard output
 * - stderrFile - the file containing the output of the test process written to standard error
 *
 * Returns the newly created TestCase object
 */
def createPassed(args) {
    return new TestCase(args.name, args.timeInSeconds, false, '', '', args['stdoutFile'] ?: '', args['stderrFile'] ?: '')
}

/**
 * Creates a TestCase for a test which was skipped
 *
 * Required parameters:
 * - name - test case name, must be unique within the test suite
 * - timeInSeconds - test case duration (timeout) in seconds
 *
 * Optional parameters:
 * - stdoutFile - the file containing the output of the test process written to standard output
 * - stderrFile - the file containing the output of the test process written to standard error
 *
 * Returns the newly created TestCase object
 */
def createSkipped(args) {
    return new TestCase(args.name, args.timeInSeconds, true, '', '', args['stdoutFile'] ?: '', args ['stderrFile'] ?: '')
}

/**
 * Creates a TestCase for a test which failed
 *
 * Required parameters:
 * - name - test case name, must be unique within the test suite
 * - timeInSeconds - test case duration (timeout) in seconds
 *
 * Optional parameters:
 * - message - the error message, e.g. the reason for the failure
 * - stdoutFile - the file containing the output of the test process written to standard output
 * - stderrFile - the file containing the output of the test process written to standard error
 *
 * Returns the newly created TestCase object
 */
def createFailed(args) {
    return new TestCase(args.name, args.timeInSeconds, false, '', args.hasProperty('message') ? args.message : 'Failed', args['stdoutFile'] ?: '', args['stderrFile'] ?: '')
}

/**
 * Writes the given TestCases into a XML file in the "JUnit" format to be parsed by the Jenkins JUnit plugin.
 *
 * Required parameters:
 * - name - test suite name, must be unique among the Jenkins job
 * - tests - the list of TestCases (or any compatible type) for the actual single test-cases
 *
 * Returns the filename of the "JUnit" XML file created
 */
def generateReport(args) {

    // The layout of the "JUnit" (which is actually not generated by JUnit) XML file is taken from:
    // - https://stackoverflow.com/questions/4922867/what-is-the-junit-xml-format-specification-that-hudson-supports
    // - https://help.catchsoftware.com/display/ET/JUnit+Format

    // For performance reasons (and easier normalization of non-printable characters), we run the following commands completely on the slave
    outFile = "${args.name}-junit.xml"
    sh "echo '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n' > ${outFile}"
    sh "echo '<testsuite id=\"${args.name}\" name=\"${args.name}\" tests=\"${args.tests.size()}\">\n' >> ${outFile}"

    for(test in args.tests) {
        sh "echo '<testcase classname=\"${test.name}\" name=\"${test.name}\" status=\"\" time=\"${test.timeInSeconds}\">\n' >> ${outFile}"
        if(test.skipped)
            sh "echo '<skipped/>\n' >> ${outFile}"
        if(!test.error.isEmpty())
            sh "echo '<error message=\"${test.error}\" type=\"\"/>\n' >> ${outFile}"
        if(!test.failure.isEmpty())
            sh "echo '<failure message=\"${test.failure}\" type=\"\"/>\n' >> ${outFile}"
        if(!test.stdoutFile.isEmpty()) {
            sh "echo '<system-out><![CDATA[\n' >> ${outFile}"
            // clean up non-printable characters (e.g. generated by dumping (u)char values), replace them with their hex values
            // e.g. 0x07 (ASCII bell) will be replaced with "<07>"
            sh "perl -pe 's/([^[:print:]\n])/sprintf(\"<%02X>\", ord(\$1))/ge' ${test.stdoutFile} >> ${outFile}"
            sh "echo '\n]]></system-out>' >> ${outFile}"
        }
        if(!test.stderrFile.isEmpty()) {
            sh "echo '<system-err><![CDATA[\n' >> ${outFile}"
            // clean up non-printable characters (e.g. generated by dumping (u)char values), replace them with their hex values
            sh "perl -pe 's/([^[:print:]\n])/sprintf(\"<%02X>\", ord(\$1))/ge' ${test.stderrFile} >> ${outFile}"
            sh "echo '\n]]></system-err>' >> ${outFile}"
        }
        sh "echo '</testcase>\n' >> ${outFile}"
    }

    sh "echo '</testsuite>\n' >> ${outFile}"
    return outFile
}

// Required so the functions/variables in here are actually available
return this
