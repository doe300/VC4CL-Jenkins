/**
 * Depending on the configuration, installs the (latest or specific) DEB packages for VC4C, VC4CL and VC4CLStdLib
 *
 * Required parameters:
 * - scriptDir - the path to the directory where these scripts are located
 *
 * Possible additional parameters:
 * - vc4c_url - the full URL to the VC4C debian package to install (defaults to latest CI build)
 * - vc4cl_url - the full URL to the VC4CL debian package to install (defaults to latest CI build)
 * - vc4cl_stdlib_url - the full URL to the VC4CL StdLib debian package to install (defaults to latest CI build)
 * - vc4c_branch - the name of the remote VC4C branch to download the latest CI packages for (defaults to "cross")
 * - vc4cl_branch - the name of the remote VC4CL branch to download the latest CI packages for (defaults to "cross")
 * - vc4c_build - the number of the VC4C CI build to download the packages for (defaults to the latest for the selected branch)
 * - vc4cl_build - the number of the VC4CL CI build to download the packages for (defaults to the latest for the selected branch)
 * - vc4c_deb - the full path to the local VC4C debian package to install (defaults to the downloaded package)
 * - vc4cl_deb - the full path to the local VC4CL debian package to install (defaults to the downloaded package)
 * - vc4cl_stdlib_deb - the full path to the local VC4CL StdLib debian package to install (defaults to the downloaded package)
 *
 * For each of the packages (VC4C, VC4CL, VC4CLStdLib), the variables are treated as follows:
 * - If <package>_deb is set, this package is installed
 * - Otherwise, of <package>_url is set, this package is downloaded and installed
 * - Otherwise, if <package>_build is set, the package generated by the CI for that particular CI build is downloaded and installed
 * - Otherwise, of <package>_branch is set, the package generated by the latest CI build for that particular branch is downloaded and installed
 * - Otherwise, the package generated by the latest CI build for the "master" branch is downloaded and installed
 */
def installPackages(String scriptDir, Map args = null) {
    vc4c_url = args != null && args.containsKey('vc4c_url') ? args['vc4c_url'] : null
    vc4cl_url = args != null && args.containsKey('vc4cl_url') ? args['vc4cl_url'] : null
    vc4cl_stdlib_url = args != null && args.containsKey('vc4cl_stdlib_url') ? args['vc4cl_stdlib_url'] : null
    vc4c_branch = args != null && args.containsKey('vc4c_branch') ? args['vc4c_branch'] : 'master'
    vc4cl_branch = args != null && args.containsKey('vc4cl_branch') ? args['vc4cl_branch'] : 'master'
    vc4c_build = args != null && args.containsKey('vc4c_build') ? args['vc4c_build'] : null
    vc4cl_build = args != null && args.containsKey('vc4cl_build') ? args['vc4cl_build'] : null
    vc4c_deb = args != null && args.containsKey('vc4c_deb') ? args['vc4c_deb'] : null
    vc4cl_deb = args != null && args.containsKey('vc4cl_deb') ? args['vc4cl_deb'] : null
    vc4cl_stdlib_deb = args != null && args.containsKey('vc4cl_stdlib_deb') ? args['vc4cl_stdlib_deb'] : null

    if(vc4c_deb == null || vc4c_url == null || vc4cl_stdlib_deb == null || vc4cl_stdlib_url == null) {
        if(!vc4c_build) {
            sh 'curl "https://circleci.com/api/v1.1/project/github/doe300/VC4C" --output ./tmp.json'
            vc4c_build = sh returnStdout: true, script: "${scriptDir}/build_num.py ./tmp.json --branch ${vc4c_branch}"
            vc4c_build = vc4c_build.trim()
        }
        sh "curl 'https://circleci.com/api/v1.1/project/github/doe300/VC4C/${vc4c_build}/artifacts' --output ./vc4c.json"
        if(vc4cl_stdlib_url == null) {
            vc4cl_stdlib_url = sh returnStdout: true, script: "python ${scriptDir}/get_url.py 'vc4cl-stdlib-' './vc4c.json'"
        }
        if(vc4c_url == null) {
            vc4c_url = sh returnStdout: true, script: "python ${scriptDir}/get_url.py 'vc4c-' './vc4c.json'"
        }
        if(vc4cl_stdlib_deb == null) {
            vc4cl_stdlib_deb = './vc4cl-stdlib.deb'
            sh "wget -O ${vc4cl_stdlib_deb} ${vc4cl_stdlib_url}"
        }
        if(vc4c_deb == null) {
            vc4c_deb = './vc4c.deb'
            sh "wget -O ${vc4c_deb} ${vc4c_url}"
        }
    }
    if(vc4cl_deb == null || vc4cl_url == null) {
        if(!vc4cl_build) {
            sh 'curl "https://circleci.com/api/v1.1/project/github/doe300/VC4CL" --output ./tmp.json'
            vc4cl_build = sh returnStdout: true, script: "${scriptDir}/build_num.py ./tmp.json --branch ${vc4cl_branch}"
            vc4cl_build = vc4cl_build.trim()
        }
        sh "curl 'https://circleci.com/api/v1.1/project/github/doe300/VC4CL/${vc4cl_build}/artifacts' --output ./vc4cl.json"
        if(vc4cl_url == null) {
            vc4cl_url = sh returnStdout: true, script: "python ${scriptDir}/get_url.py 'vc4cl-' './vc4cl.json'"
        }
        if(vc4cl_deb == null) {
            vc4cl_deb = './vc4cl.deb'
            sh "wget -O ${vc4cl_deb} ${vc4cl_url}"
        }
    }
    sh "sudo dpkg --skip-same-version --install ${vc4cl_stdlib_deb}"
    sh "sudo dpkg --skip-same-version --install ${vc4c_deb}"
    sh "sudo dpkg --skip-same-version --install ${vc4cl_deb}"
    sh 'sudo dpkg --status vc4c'
    sh 'sudo dpkg --status vc4cl'
    sh 'sudo dpkg --status vc4cl-stdlib'
    sh '/usr/local/bin/vc4c --version'

    // So we do not implicitly return the result of the last command
    return
}

/**
 * Uninstalls the DEB packages for VC4C, VC4CL and VC4CLStdLib
 */
def uninstallPackages() {
    sh 'sudo dpkg -r vc4cl'
    sh 'sudo dpkg -r vc4c'
    sh 'sudo dpkg -r vc4cl-stdlib'

    // So we do not implicitly return the result of the last command
    return
}

// Required for the scripts to be available
return this
